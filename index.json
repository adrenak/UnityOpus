{
  "api/Adrenak.UnityOpus.Decoder.html": {
    "href": "api/Adrenak.UnityOpus.Decoder.html",
    "title": "Class Decoder | UnityOpus documentation",
    "keywords": "Class Decoder Represents an Opus decoder for decoding Opus-encoded data to PCM. Inheritance System.Object Decoder Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public class Decoder : IDisposable Constructors Decoder(SamplingFrequency, NumChannels) Initializes a new instance of the Decoder class. Declaration public Decoder(SamplingFrequency samplingFrequency, NumChannels channels) Parameters Type Name Description SamplingFrequency samplingFrequency The sampling frequency of the input data. NumChannels channels The number of audio channels. Fields maximumPacketDuration The maximum packet duration supported by the Opus decoder. Declaration public const int maximumPacketDuration = 5760 Field Value Type Description System.Int32 Methods Decode(Byte[], Int32, Single[], Int32) Decodes the provided Opus data into PCM float format. Declaration public int Decode(byte[] data, int dataLength, float[] pcm, int decodeFec = 0) Parameters Type Name Description System.Byte [] data The Opus-encoded byte data. System.Int32 dataLength The length of the input data. System.Single [] pcm Output float array for PCM data. System.Int32 decodeFec Flag to enable forward error correction (FEC). Returns Type Description System.Int32 The length of the decoded PCM data. Dispose() Disposes of the decoder and suppresses finalization. Declaration public void Dispose() Dispose(Boolean) Releases the unmanaged resources used by the decoder. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True if disposing managed resources. Finalize() Finalizer for Decoder . Declaration protected void Finalize() Implements System.IDisposable"
  },
  "api/Adrenak.UnityOpus.Encoder.html": {
    "href": "api/Adrenak.UnityOpus.Encoder.html",
    "title": "Class Encoder | UnityOpus documentation",
    "keywords": "Class Encoder Represents an Opus encoder for encoding PCM data. Inheritance System.Object Encoder Implements System.IDisposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public class Encoder : IDisposable Constructors Encoder(SamplingFrequency, NumChannels, OpusApplication) Initializes a new instance of the Encoder class. Declaration public Encoder(SamplingFrequency samplingFrequency, NumChannels channels, OpusApplication application) Parameters Type Name Description SamplingFrequency samplingFrequency The sampling frequency of the input data. NumChannels channels The number of audio channels. OpusApplication application The Opus application type (e.g., VoIP, Audio). Properties Bitrate Gets or sets the bitrate of the encoder. NOTE: get only returns the value that's been set by you before. Declaration public int Bitrate { get; set; } Property Value Type Description System.Int32 Complexity Gets or sets the complexity level of the encoder. NOTE: get only returns the value that's been set by you before. Declaration public int Complexity { get; set; } Property Value Type Description System.Int32 Signal Gets or sets the signal type (e.g., voice, music) for the encoder. NOTE: get only returns the value that's been set by you before. Declaration public OpusSignal Signal { get; set; } Property Value Type Description OpusSignal Methods Dispose() Disposes of the encoder and suppresses finalization. Declaration public void Dispose() Dispose(Boolean) Releases the unmanaged resources used by the encoder. Declaration protected virtual void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing True if disposing managed resources. Encode(Single[], Byte[]) Encodes the provided PCM float data to Opus format. Declaration public int Encode(float[] pcm, byte[] output) Parameters Type Name Description System.Single [] pcm Input PCM float array. System.Byte [] output Output byte array for encoded data. Returns Type Description System.Int32 The size of the encoded data in bytes. Finalize() Finalizer for Encoder . Declaration protected void Finalize() Implements System.IDisposable"
  },
  "api/Adrenak.UnityOpus.ErrorCode.html": {
    "href": "api/Adrenak.UnityOpus.ErrorCode.html",
    "title": "Enum ErrorCode | UnityOpus documentation",
    "keywords": "Enum ErrorCode Represents error codes that may be returned by Opus functions. Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public enum ErrorCode Fields Name Description AllocFail Memory allocation failed during the operation. BadArg One or more invalid arguments were provided. BufferTooSmall The provided buffer was too small to hold the output data. InternalError An internal error occurred within the Opus library. InvalidPacket The input packet is invalid or corrupted. InvalidState The encoder or decoder is in an invalid state. OK No error occurred; the operation was successful. Unimplemented The requested operation has not been implemented."
  },
  "api/Adrenak.UnityOpus.html": {
    "href": "api/Adrenak.UnityOpus.html",
    "title": "Namespace Adrenak.UnityOpus | UnityOpus documentation",
    "keywords": "Namespace Adrenak.UnityOpus Classes Decoder Represents an Opus decoder for decoding Opus-encoded data to PCM. Encoder Represents an Opus encoder for encoding PCM data. OpusLib Provides interop calls to the Opus native libraries Enums ErrorCode Represents error codes that may be returned by Opus functions. NumChannels Specifies the number of audio channels. OpusApplication Represents the target application for the Opus encoder. OpusSignal Specifies the signal type for the Opus encoder. SamplingFrequency Defines supported sampling frequencies for the Opus codec."
  },
  "api/Adrenak.UnityOpus.NumChannels.html": {
    "href": "api/Adrenak.UnityOpus.NumChannels.html",
    "title": "Enum NumChannels | UnityOpus documentation",
    "keywords": "Enum NumChannels Specifies the number of audio channels. Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public enum NumChannels Fields Name Description Mono Mono audio (single channel). Stereo Stereo audio (two channels)."
  },
  "api/Adrenak.UnityOpus.OpusApplication.html": {
    "href": "api/Adrenak.UnityOpus.OpusApplication.html",
    "title": "Enum OpusApplication | UnityOpus documentation",
    "keywords": "Enum OpusApplication Represents the target application for the Opus encoder. Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public enum OpusApplication Fields Name Description Audio Optimized for general audio applications (e.g., music streaming). RestrictedLowDelay Optimized for low-delay applications (e.g., real-time audio). VoIP Optimized for VoIP applications (e.g., speech communication)."
  },
  "api/Adrenak.UnityOpus.OpusLib.html": {
    "href": "api/Adrenak.UnityOpus.OpusLib.html",
    "title": "Class OpusLib | UnityOpus documentation",
    "keywords": "Class OpusLib Provides interop calls to the Opus native libraries Inheritance System.Object OpusLib Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public class OpusLib Fields maximumPacketDuration The maximum duration (in milliseconds) of a single packet of encoded audio data that the decoder can handle Declaration public const int maximumPacketDuration = 5760 Field Value Type Description System.Int32 Methods OpusDecode(IntPtr, Byte[], Int32, Int16[], Int32, Int32) Decodes Opus data into PCM samples. Declaration public static extern int OpusDecode(IntPtr decoder, byte[] data, int len, short[] pcm, int frameSize, int decodeFec) Parameters Type Name Description System.IntPtr decoder A pointer to the Opus decoder instance. System.Byte [] data The input buffer containing encoded Opus data. System.Int32 len The length of the input buffer. System.Int16 [] pcm The output buffer for the decoded PCM samples (16-bit signed integers). System.Int32 frameSize The number of samples per frame. System.Int32 decodeFec Indicates if forward error correction (FEC) is enabled (0 or 1). Returns Type Description System.Int32 The number of decoded samples, or an error code if failed. OpusDecodeFloat(IntPtr, Byte[], Int32, Single[], Int32, Int32) Decodes Opus data into PCM samples in floating-point format. Declaration public static extern int OpusDecodeFloat(IntPtr decoder, byte[] data, int len, float[] pcm, int frameSize, int decodeFec) Parameters Type Name Description System.IntPtr decoder A pointer to the Opus decoder instance. System.Byte [] data The input buffer containing encoded Opus data. System.Int32 len The length of the input buffer. System.Single [] pcm The output buffer for the decoded PCM samples (32-bit floating-point). System.Int32 frameSize The number of samples per frame. System.Int32 decodeFec Indicates if forward error correction (FEC) is enabled (0 or 1). Returns Type Description System.Int32 The number of decoded samples, or an error code if failed. OpusDecoderCreate(SamplingFrequency, NumChannels, out ErrorCode) Creates a new Opus decoder instance. Declaration public static extern IntPtr OpusDecoderCreate(SamplingFrequency samplingFrequency, NumChannels channels, out ErrorCode error) Parameters Type Name Description SamplingFrequency samplingFrequency The sampling frequency to be used by the decoder. NumChannels channels The number of audio channels (mono or stereo). ErrorCode error Outputs an error code indicating success or failure. Returns Type Description System.IntPtr A pointer to the newly created Opus decoder instance. OpusDecoderDestroy(IntPtr) Destroys an Opus decoder instance, freeing its allocated resources. Declaration public static extern void OpusDecoderDestroy(IntPtr decoder) Parameters Type Name Description System.IntPtr decoder A pointer to the Opus decoder instance to be destroyed. OpusEncode(IntPtr, Int16[], Int32, Byte[], Int32) Encodes audio samples into Opus format. Declaration public static extern int OpusEncode(IntPtr encoder, short[] pcm, int frameSize, byte[] data, int maxDataBytes) Parameters Type Name Description System.IntPtr encoder A pointer to the Opus encoder instance. System.Int16 [] pcm The PCM audio samples to encode (16-bit signed integers). System.Int32 frameSize The number of samples per frame. System.Byte [] data The output buffer where the encoded data will be stored. System.Int32 maxDataBytes The maximum size of the output buffer in bytes. Returns Type Description System.Int32 The length of the encoded data in bytes, or an error code if failed. OpusEncodeFloat(IntPtr, Single[], Int32, Byte[], Int32) Encodes audio samples in floating-point format into Opus format. Declaration public static extern int OpusEncodeFloat(IntPtr encoder, float[] pcm, int frameSize, byte[] data, int maxDataBytes) Parameters Type Name Description System.IntPtr encoder A pointer to the Opus encoder instance. System.Single [] pcm The PCM audio samples to encode (32-bit floating-point). System.Int32 frameSize The number of samples per frame. System.Byte [] data The output buffer where the encoded data will be stored. System.Int32 maxDataBytes The maximum size of the output buffer in bytes. Returns Type Description System.Int32 The length of the encoded data in bytes, or an error code if failed. OpusEncoderCreate(SamplingFrequency, NumChannels, OpusApplication, out ErrorCode) Creates a new Opus encoder instance. Declaration public static extern IntPtr OpusEncoderCreate(SamplingFrequency samplingFrequency, NumChannels channels, OpusApplication application, out ErrorCode error) Parameters Type Name Description SamplingFrequency samplingFrequency The sampling frequency to be used by the encoder (e.g., 48kHz). NumChannels channels The number of audio channels (mono or stereo). OpusApplication application The target application for the encoder (e.g., VoIP, Audio, or LowDelay). ErrorCode error Outputs an error code indicating success or failure. Returns Type Description System.IntPtr A pointer to the newly created Opus encoder instance. OpusEncoderDestroy(IntPtr) Destroys an Opus encoder instance, freeing its allocated resources. Declaration public static extern void OpusEncoderDestroy(IntPtr encoder) Parameters Type Name Description System.IntPtr encoder A pointer to the Opus encoder instance to be destroyed. OpusEncoderSetBitrate(IntPtr, Int32) Sets the bitrate of the Opus encoder. Declaration public static extern int OpusEncoderSetBitrate(IntPtr encoder, int bitrate) Parameters Type Name Description System.IntPtr encoder A pointer to the Opus encoder instance. System.Int32 bitrate The desired bitrate in bits per second (e.g., 64000 for 64kbps). Returns Type Description System.Int32 Returns 0 on success, or an error code otherwise. OpusEncoderSetComplexity(IntPtr, Int32) Sets the complexity of the Opus encoder. Declaration public static extern int OpusEncoderSetComplexity(IntPtr encoder, int complexity) Parameters Type Name Description System.IntPtr encoder A pointer to the Opus encoder instance. System.Int32 complexity The complexity level (0-10, where 10 is the highest quality). Returns Type Description System.Int32 Returns 0 on success, or an error code otherwise. OpusEncoderSetSignal(IntPtr, OpusSignal) Configures the encoder signal type (e.g., voice or music). Declaration public static extern int OpusEncoderSetSignal(IntPtr encoder, OpusSignal signal) Parameters Type Name Description System.IntPtr encoder A pointer to the Opus encoder instance. OpusSignal signal The signal type, such as voice or music. Returns Type Description System.Int32 Returns 0 on success, or an error code otherwise. OpusPcmSoftClip(Single[], Int32, NumChannels, Single[]) Applies soft clipping to PCM samples to prevent distortion. Declaration public static extern void OpusPcmSoftClip(float[] pcm, int frameSize, NumChannels channels, float[] softclipMem) Parameters Type Name Description System.Single [] pcm The buffer containing PCM samples (32-bit floating-point). System.Int32 frameSize The number of samples per frame. NumChannels channels The number of audio channels. System.Single [] softclipMem A memory buffer for maintaining the soft clip state."
  },
  "api/Adrenak.UnityOpus.OpusSignal.html": {
    "href": "api/Adrenak.UnityOpus.OpusSignal.html",
    "title": "Enum OpusSignal | UnityOpus documentation",
    "keywords": "Enum OpusSignal Specifies the signal type for the Opus encoder. Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public enum OpusSignal Fields Name Description Auto Automatically detects the signal type (default behavior). Music Optimized for music signals. Voice Optimized for voice signals (e.g., speech)."
  },
  "api/Adrenak.UnityOpus.SamplingFrequency.html": {
    "href": "api/Adrenak.UnityOpus.SamplingFrequency.html",
    "title": "Enum SamplingFrequency | UnityOpus documentation",
    "keywords": "Enum SamplingFrequency Defines supported sampling frequencies for the Opus codec. Namespace : Adrenak.UnityOpus Assembly : cs.temp.dll.dll Syntax public enum SamplingFrequency Fields Name Description Frequency_12000 12 kHz sampling frequency, suitable for medium-band audio. Frequency_16000 16 kHz sampling frequency, commonly used for wideband speech. Frequency_24000 24 kHz sampling frequency, providing good quality for music and audio. Frequency_48000 48 kHz sampling frequency, offering the highest audio quality. Frequency_8000 8 kHz sampling frequency, typically used for narrowband audio."
  },
  "index.html": {
    "href": "index.html",
    "title": "UnityOpus | UnityOpus documentation",
    "keywords": "UnityOpus Note: A UPM fork of UnityOps by TyounanMOTI with some XML comments. The original project is sponsored by Cluster, Inc. Scripting reference Contact 👥 @github @website @discord: adrenak#1934"
  }
}